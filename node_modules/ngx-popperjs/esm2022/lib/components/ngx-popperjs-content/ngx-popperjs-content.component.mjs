import { ChangeDetectionStrategy, Component, EventEmitter, HostListener, ViewChild, ViewEncapsulation } from "@angular/core";
import { NgxPopperjsPlacements } from "../../models/ngx-popperjs-placements.model";
import { NgxPopperjsTriggers } from "../../models/ngx-popperjs-triggers.model";
//
import { createPopper as Popper } from "@popperjs/core";
import { fromEvent, Subject, takeUntil } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
class NgxPopperjsContentComponent {
    elRef;
    _viewRef;
    _changeDetectorRef;
    static nextId = 0;
    ariaHidden;
    arrowColor = null;
    displayType;
    id = `ngx_poppperjs_${++NgxPopperjsContentComponent.nextId}`;
    isMouseOver = !1;
    onHidden = new EventEmitter();
    onUpdate;
    opacity;
    popperInstance;
    popperOptions = {
        disableAnimation: false,
        disableDefaultStyling: false,
        placement: NgxPopperjsPlacements.AUTO,
        boundariesElement: "",
        trigger: NgxPopperjsTriggers.hover,
        positionFixed: false,
        appendToBody: false,
        popperModifiers: []
    };
    popperViewRef;
    referenceObject;
    state;
    text;
    _baseModifiers = [
        {
            name: "offset",
            enabled: !0,
            options: {
                offset: [0, 8],
            }
        },
        {
            name: "arrow",
            enabled: !0,
            options: {
                element: ".ngxp__arrow",
                padding: 3
            },
            requires: ["arrow"]
        }
    ];
    _destroy$ = new Subject();
    _styleId = `${this.id}_style`;
    constructor(elRef, _viewRef, _changeDetectorRef) {
        this.elRef = elRef;
        this._viewRef = _viewRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._toggleVisibility(!1);
    }
    clean() {
        this.toggleVisibility(false);
        if (!this.popperInstance) {
            return;
        }
        this.popperInstance.destroy();
    }
    extractAppliedClassListExpr(classList = []) {
        const klassList = Array.isArray(classList) ? classList : typeof classList === typeof "" ? classList.replace(/ /, "").split(",") : [];
        return klassList.reduce((acc, klass) => {
            acc[klass] = !0;
            return acc;
        }, {});
    }
    hide() {
        if (this.popperInstance) {
            this.popperInstance.destroy();
        }
        this.toggleVisibility(false);
        this.onHidden.emit();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this.clean();
        if (this.popperOptions.appendTo && this.elRef && this.elRef.nativeElement && this.elRef.nativeElement.parentNode) {
            this._viewRef.detach();
            this.elRef.nativeElement.parentNode.removeChild(this.elRef.nativeElement);
        }
    }
    onDocumentResize() {
        this.update();
    }
    onMouseOver() {
        this.isMouseOver = true;
    }
    show() {
        if (!this.referenceObject) {
            return;
        }
        const appendToParent = this.popperOptions.appendTo && document.querySelector(this.popperOptions.appendTo);
        if (appendToParent && this.elRef.nativeElement.parentNode !== appendToParent) {
            this.elRef.nativeElement.parentNode && this.elRef.nativeElement.parentNode.removeChild(this.elRef.nativeElement);
            appendToParent.appendChild(this.elRef.nativeElement);
        }
        const popperOptions = {
            strategy: this.popperOptions.positionFixed ? "fixed" : "absolute",
            placement: this.popperOptions.placement,
            modifiers: this._baseModifiers
        };
        if (this.onUpdate) {
            popperOptions.onFirstUpdate = this.onUpdate;
        }
        const boundariesElement = this.popperOptions.boundariesElement && document.querySelector(this.popperOptions.boundariesElement);
        if (popperOptions.modifiers && boundariesElement) {
            popperOptions.modifiers.push({
                name: "preventOverflow",
                enabled: this.popperOptions.preventOverflow,
                options: {
                    boundary: boundariesElement
                }
            });
        }
        if (popperOptions.modifiers) {
            const preventOverflowModifier = popperOptions.modifiers.find((v) => v.name === "preventOverflow");
            if (preventOverflowModifier && !preventOverflowModifier.enabled) {
                const hideModifier = popperOptions.modifiers.find((v) => v.name === "preventOverflow");
                hideModifier && (hideModifier.enabled = !1);
            }
        }
        this._determineArrowColor();
        popperOptions.modifiers = popperOptions.modifiers.concat(this.popperOptions.popperModifiers);
        window.requestAnimationFrame(() => {
            window.requestAnimationFrame(() => {
                this.popperInstance = Popper(this.referenceObject, this.popperViewRef.nativeElement, popperOptions);
            });
        });
        this.toggleVisibility(!0);
        fromEvent(document, "resize")
            .pipe(takeUntil(this._destroy$))
            .subscribe({
            next: () => this.onDocumentResize()
        });
    }
    showOnLeave() {
        this.isMouseOver = false;
        if (this.popperOptions.trigger !== NgxPopperjsTriggers.hover && !this.popperOptions.hideOnMouseLeave) {
            return;
        }
        this.hide();
    }
    // Toggle visibility and detect changes - Run only after ngOnInit!
    toggleVisibility(state) {
        this._toggleVisibility(state);
        // tslint:disable-next-line:no-string-literal
        if (!this._changeDetectorRef["destroyed"]) {
            this._changeDetectorRef.detectChanges();
        }
    }
    update() {
        this.popperInstance && this.popperInstance.update();
    }
    _createArrowSelector() {
        return `div#${this.id}.ngxp__container > .ngxp__arrow.ngxp__force-arrow`;
    }
    _determineArrowColor() {
        if (!this.popperOptions.styles || this.arrowColor) {
            return !1;
        }
        const ruleValue = this.popperOptions.styles["background-color"] || this.popperOptions.styles.backgroundColor;
        if (this.arrowColor === ruleValue) {
            return !1;
        }
        this.arrowColor = ruleValue;
        let $style = document.querySelector(`#${this._styleId}`);
        const styleContent = this.arrowColor ?
            `${this._createArrowSelector()}:before { background-color: ${this.arrowColor}; }` : "";
        if (!$style) {
            $style = document.createElement("style");
            $style.id = this._styleId;
            $style.setAttribute("type", "text/css");
            document.head.appendChild($style);
        }
        // tslint:disable-next-line:no-string-literal
        if ($style["styleSheet"]) {
            // tslint:disable-next-line:no-string-literal
            $style["styleSheet"].cssText = styleContent;
            // This is required for IE8 and below.
        }
        else {
            $style.innerHTML = styleContent;
        }
    }
    _toggleVisibility(state) {
        this.displayType = ["none", "block"][+state];
        this.opacity = +state;
        this.ariaHidden = `${!state}`;
        this.state = state;
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: NgxPopperjsContentComponent, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.2", type: NgxPopperjsContentComponent, selector: "popper-content", host: { listeners: { "mouseover": "onMouseOver()", "mouseleave": "showOnLeave()" } }, viewQueries: [{ propertyName: "popperViewRef", first: true, predicate: ["popperViewRef"], descendants: true, static: true }], exportAs: ["ngxPopperjsContent"], ngImport: i0, template: "<div #popperViewRef\r\n     [attr.id]=\"id\"\r\n     [class.ngxp__container]=\"!popperOptions.disableDefaultStyling\"\r\n     [class.ngxp__animation]=\"!popperOptions.disableAnimation\"\r\n     [style.display]=\"displayType\"\r\n     [style.opacity]=\"opacity\"\r\n     [ngStyle]=\"popperOptions.styles\"\r\n     [ngClass]=\"extractAppliedClassListExpr(popperOptions.applyClass)\"\r\n     attr.aria-hidden=\"{{ariaHidden}}\"\r\n     [attr.aria-describedby]=\"popperOptions.ariaDescribe || null\"\r\n     attr.role=\"{{popperOptions.ariaRole}}\">\r\n    <div *ngIf=\"text\"\r\n         class=\"ngxp__inner\"\r\n         [innerHTML]=\"text\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n    <div *ngIf=\"!text\"\r\n         class=\"ngxp__inner\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n    <div class=\"ngxp__arrow\"\r\n         data-popper-arrow\r\n         [class.ngxp__force-arrow]=\"arrowColor\"\r\n         [ngClass]=\"extractAppliedClassListExpr(popperOptions.applyArrowClass)\"></div>\r\n\r\n</div>\r\n", styles: ["popper-content{position:relative;display:block}.ngxp__container{display:none;position:absolute;border-radius:3px;border:1px solid grey;box-shadow:0 0 2px #00000080;padding:10px}.ngxp__container.ngxp__animation{animation:ngxp-fadeIn .15s ease-out}.ngxp__container>.ngxp__arrow,.ngxp__container>.ngxp__arrow:before{position:absolute;width:10px;height:10px;z-index:-1}.ngxp__container>.ngxp__arrow:before{transform:rotate(45deg);content:\"\";background-color:#fff;top:0;left:0}.ngxp__container[data-popper-placement^=top]>.ngxp__arrow{bottom:-4px}.ngxp__container[data-popper-placement^=bottom]>.ngxp__arrow{top:-4px}.ngxp__container[data-popper-placement^=left]>.ngxp__arrow{right:-4px}.ngxp__container[data-popper-placement^=right]>.ngxp__arrow{left:-4px}@keyframes ngxp-fadeIn{0%{display:none;opacity:0}1%{display:block;opacity:0}to{display:block;opacity:1}}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
}
export { NgxPopperjsContentComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: NgxPopperjsContentComponent, decorators: [{
            type: Component,
            args: [{ selector: "popper-content", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: "ngxPopperjsContent", template: "<div #popperViewRef\r\n     [attr.id]=\"id\"\r\n     [class.ngxp__container]=\"!popperOptions.disableDefaultStyling\"\r\n     [class.ngxp__animation]=\"!popperOptions.disableAnimation\"\r\n     [style.display]=\"displayType\"\r\n     [style.opacity]=\"opacity\"\r\n     [ngStyle]=\"popperOptions.styles\"\r\n     [ngClass]=\"extractAppliedClassListExpr(popperOptions.applyClass)\"\r\n     attr.aria-hidden=\"{{ariaHidden}}\"\r\n     [attr.aria-describedby]=\"popperOptions.ariaDescribe || null\"\r\n     attr.role=\"{{popperOptions.ariaRole}}\">\r\n    <div *ngIf=\"text\"\r\n         class=\"ngxp__inner\"\r\n         [innerHTML]=\"text\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n    <div *ngIf=\"!text\"\r\n         class=\"ngxp__inner\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n    <div class=\"ngxp__arrow\"\r\n         data-popper-arrow\r\n         [class.ngxp__force-arrow]=\"arrowColor\"\r\n         [ngClass]=\"extractAppliedClassListExpr(popperOptions.applyArrowClass)\"></div>\r\n\r\n</div>\r\n", styles: ["popper-content{position:relative;display:block}.ngxp__container{display:none;position:absolute;border-radius:3px;border:1px solid grey;box-shadow:0 0 2px #00000080;padding:10px}.ngxp__container.ngxp__animation{animation:ngxp-fadeIn .15s ease-out}.ngxp__container>.ngxp__arrow,.ngxp__container>.ngxp__arrow:before{position:absolute;width:10px;height:10px;z-index:-1}.ngxp__container>.ngxp__arrow:before{transform:rotate(45deg);content:\"\";background-color:#fff;top:0;left:0}.ngxp__container[data-popper-placement^=top]>.ngxp__arrow{bottom:-4px}.ngxp__container[data-popper-placement^=bottom]>.ngxp__arrow{top:-4px}.ngxp__container[data-popper-placement^=left]>.ngxp__arrow{right:-4px}.ngxp__container[data-popper-placement^=right]>.ngxp__arrow{left:-4px}@keyframes ngxp-fadeIn{0%{display:none;opacity:0}1%{display:block;opacity:0}to{display:block;opacity:1}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { popperViewRef: [{
                type: ViewChild,
                args: ["popperViewRef", { static: !0 }]
            }], onMouseOver: [{
                type: HostListener,
                args: ["mouseover"]
            }], showOnLeave: [{
                type: HostListener,
                args: ["mouseleave"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBvcHBlcmpzLWNvbnRlbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXBvcHBlcmpzL3NyYy9saWIvY29tcG9uZW50cy9uZ3gtcG9wcGVyanMtY29udGVudC9uZ3gtcG9wcGVyanMtY29udGVudC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcG9wcGVyanMvc3JjL2xpYi9jb21wb25lbnRzL25neC1wb3BwZXJqcy1jb250ZW50L25neC1wb3BwZXJqcy1jb250ZW50LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFFdkIsU0FBUyxFQUVULFlBQVksRUFDWixZQUFZLEVBRVosU0FBUyxFQUVULGlCQUFpQixFQUNwQixNQUFNLGVBQWUsQ0FBQztBQUd2QixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSw0Q0FBNEMsQ0FBQztBQUNqRixPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSwwQ0FBMEMsQ0FBQztBQUM3RSxFQUFFO0FBQ0YsT0FBTyxFQUFDLFlBQVksSUFBSSxNQUFNLEVBQVUsTUFBTSxnQkFBZ0IsQ0FBQztBQUsvRCxPQUFPLEVBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUMsTUFBTSxNQUFNLENBQUM7OztBQUVuRCxNQVNhLDJCQUEyQjtJQWtEakI7SUFDRztJQUNBO0lBbER0QixNQUFNLENBQUMsTUFBTSxHQUFXLENBQUMsQ0FBQztJQUUxQixVQUFVLENBQVM7SUFDbkIsVUFBVSxHQUFrQixJQUFJLENBQUM7SUFDakMsV0FBVyxDQUFTO0lBQ3BCLEVBQUUsR0FBVyxpQkFBaUIsRUFBRSwyQkFBMkIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNyRSxXQUFXLEdBQVksQ0FBQyxDQUFDLENBQUM7SUFDMUIsUUFBUSxHQUFHLElBQUksWUFBWSxFQUFF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QUMsQ0FBQztTQUNyQztRQUNELDZDQUE2QztRQUM3QyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUN0Qiw2Q0FBNkM7WUFDN0MsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUM7WUFDNUMsc0NBQXNDO1NBQ3pDO2FBQ0k7WUFDRCxNQUFNLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQztTQUNuQztJQUNMLENBQUM7SUFFUyxpQkFBaUIsQ0FBQyxLQUFLO1FBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7MEhBMU5RLDJCQUEyQjs4R0FBM0IsMkJBQTJCLDRTQ2pDeEMsMGdDQTBCQTs7U0RPYSwyQkFBMkI7MkZBQTNCLDJCQUEyQjtrQkFUdkMsU0FBUzsrQkFFSSxnQkFBZ0IsaUJBQ1gsaUJBQWlCLENBQUMsSUFBSSxtQkFDcEIsdUJBQXVCLENBQUMsTUFBTSxZQUdyQyxvQkFBb0I7Z0tBMEI5QixhQUFhO3NCQURaLFNBQVM7dUJBQUMsZUFBZSxFQUFFLEVBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFDO2dCQXlFeEMsV0FBVztzQkFEVixZQUFZO3VCQUFDLFdBQVc7Z0JBK0R6QixXQUFXO3NCQURWLFlBQVk7dUJBQUMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICAgIENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgQ29tcG9uZW50LFxyXG4gICAgRWxlbWVudFJlZixcclxuICAgIEV2ZW50RW1pdHRlcixcclxuICAgIEhvc3RMaXN0ZW5lcixcclxuICAgIE9uRGVzdHJveSxcclxuICAgIFZpZXdDaGlsZCxcclxuICAgIFZpZXdDb250YWluZXJSZWYsXHJcbiAgICBWaWV3RW5jYXBzdWxhdGlvblxyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbi8vXHJcbmltcG9ydCB7Tmd4UG9wcGVyanNPcHRpb25zfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1wb3BwZXJqcy1vcHRpb25zLm1vZGVsXCI7XHJcbmltcG9ydCB7Tmd4UG9wcGVyanNQbGFjZW1lbnRzfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1wb3BwZXJqcy1wbGFjZW1lbnRzLm1vZGVsXCI7XHJcbmltcG9ydCB7Tmd4UG9wcGVyanNUcmlnZ2Vyc30gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtcG9wcGVyanMtdHJpZ2dlcnMubW9kZWxcIjtcclxuLy9cclxuaW1wb3J0IHtjcmVhdGVQb3BwZXIgYXMgUG9wcGVyLCBPcHRpb25zfSBmcm9tIFwiQHBvcHBlcmpzL2NvcmVcIjtcclxuaW1wb3J0IHtBcnJvd01vZGlmaWVyfSBmcm9tIFwiQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9hcnJvd1wiO1xyXG5pbXBvcnQge0luc3RhbmNlfSBmcm9tIFwiQHBvcHBlcmpzL2NvcmUvbGliL3R5cGVzXCI7XHJcbmltcG9ydCB7UHJldmVudE92ZXJmbG93TW9kaWZpZXJ9IGZyb20gXCJAcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvd1wiO1xyXG5pbXBvcnQge09mZnNldE1vZGlmaWVyfSBmcm9tIFwiQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9vZmZzZXRcIjtcclxuaW1wb3J0IHtmcm9tRXZlbnQsIFN1YmplY3QsIHRha2VVbnRpbH0gZnJvbSBcInJ4anNcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxyXG4gICAgc2VsZWN0b3I6IFwicG9wcGVyLWNvbnRlbnRcIixcclxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICAgIHRlbXBsYXRlVXJsOiBcIi4vbmd4LXBvcHBlcmpzLWNvbnRlbnQuY29tcG9uZW50Lmh0bWxcIixcclxuICAgIHN0eWxlVXJsczogW1wiLi9uZ3gtcG9wcGVyanMtY29udGVudC5jb21wb25lbnQuc2Nzc1wiXSxcclxuICAgIGV4cG9ydEFzOiBcIm5neFBvcHBlcmpzQ29udGVudFwiXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hQb3BwZXJqc0NvbnRlbnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG5cclxuICAgIHN0YXRpYyBuZXh0SWQ6IG51bWJlciA9IDA7XHJcblxyXG4gICAgYXJpYUhpZGRlbjogc3RyaW5nO1xyXG4gICAgYXJyb3dDb2xvcjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XHJcbiAgICBkaXNwbGF5VHlwZTogc3RyaW5nO1xyXG4gICAgaWQ6IHN0cmluZyA9IGBuZ3hfcG9wcHBlcmpzXyR7KytOZ3hQb3BwZXJqc0NvbnRlbnRDb21wb25lbnQubmV4dElkfWA7XHJcbiAgICBpc01vdXNlT3ZlcjogYm9vbGVhbiA9ICExO1xyXG4gICAgb25IaWRkZW4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBvblVwZGF0ZTogKCkgPT4gYW55O1xyXG4gICAgb3BhY2l0eTogbnVtYmVyO1xyXG4gICAgcG9wcGVySW5zdGFuY2U6IEluc3RhbmNlO1xyXG4gICAgcG9wcGVyT3B0aW9uczogTmd4UG9wcGVyanNPcHRpb25zID0ge1xyXG4gICAgICAgIGRpc2FibGVBbmltYXRpb246IGZhbHNlLFxyXG4gICAgICAgIGRpc2FibGVEZWZhdWx0U3R5bGluZzogZmFsc2UsXHJcbiAgICAgICAgcGxhY2VtZW50OiBOZ3hQb3BwZXJqc1BsYWNlbWVudHMuQVVUTyxcclxuICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogXCJcIixcclxuICAgICAgICB0cmlnZ2VyOiBOZ3hQb3BwZXJqc1RyaWdnZXJzLmhvdmVyLFxyXG4gICAgICAgIHBvc2l0aW9uRml4ZWQ6IGZhbHNlLFxyXG4gICAgICAgIGFwcGVuZFRvQm9keTogZmFsc2UsXHJcbiAgICAgICAgcG9wcGVyTW9kaWZpZXJzOiBbXVxyXG4gICAgfSBhcyBOZ3hQb3BwZXJqc09wdGlvbnM7XHJcbiAgICBAVmlld0NoaWxkKFwicG9wcGVyVmlld1JlZlwiLCB7c3RhdGljOiAhMH0pXHJcbiAgICBwb3BwZXJWaWV3UmVmOiBFbGVtZW50UmVmO1xyXG4gICAgcmVmZXJlbmNlT2JqZWN0OiBIVE1MRWxlbWVudDtcclxuICAgIHN0YXRlOiBib29sZWFuO1xyXG4gICAgdGV4dDogc3RyaW5nO1xyXG5cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBfYmFzZU1vZGlmaWVyczogW09mZnNldE1vZGlmaWVyLCBBcnJvd01vZGlmaWVyXSA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwib2Zmc2V0XCIsXHJcbiAgICAgICAgICAgIGVuYWJsZWQ6ICEwLFxyXG4gICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IFswLCA4XSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gYXMgT2Zmc2V0TW9kaWZpZXIsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiBcImFycm93XCIsXHJcbiAgICAgICAgICAgIGVuYWJsZWQ6ICEwLFxyXG4gICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBcIi5uZ3hwX19hcnJvd1wiLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogM1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZXF1aXJlczogW1wiYXJyb3dcIl1cclxuICAgICAgICB9IGFzIEFycm93TW9kaWZpZXJcclxuICAgIF07XHJcbiAgICBwcm90ZWN0ZWQgX2Rlc3Ryb3kkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcclxuICAgIHByb3RlY3RlZCBfc3R5bGVJZCA9IGAke3RoaXMuaWR9X3N0eWxlYDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxSZWY6IEVsZW1lbnRSZWYsXHJcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgX3ZpZXdSZWY6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZVZpc2liaWxpdHkoITEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFuKCkge1xyXG4gICAgICAgIHRoaXMudG9nZ2xlVmlzaWJpbGl0eShmYWxzZSk7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBvcHBlckluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wb3BwZXJJbnN0YW5jZS5kZXN0cm95KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZXh0cmFjdEFwcGxpZWRDbGFzc0xpc3RFeHByKGNsYXNzTGlzdDogc3RyaW5nIHwgc3RyaW5nW10gPSBbXSk6IG9iamVjdCB7XHJcbiAgICAgICAgY29uc3Qga2xhc3NMaXN0ID0gQXJyYXkuaXNBcnJheShjbGFzc0xpc3QpID8gY2xhc3NMaXN0IDogdHlwZW9mIGNsYXNzTGlzdCA9PT0gdHlwZW9mIFwiXCIgPyBjbGFzc0xpc3QucmVwbGFjZSgvIC8sIFwiXCIpLnNwbGl0KFwiLFwiKSA6IFtdO1xyXG5cclxuICAgICAgICByZXR1cm4ga2xhc3NMaXN0LnJlZHVjZSgoYWNjLCBrbGFzcykgPT4ge1xyXG4gICAgICAgICAgICBhY2Nba2xhc3NdID0gITA7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgIH0sIHt9KTtcclxuICAgIH1cclxuXHJcbiAgICBoaWRlKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnBvcHBlckluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucG9wcGVySW5zdGFuY2UuZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRvZ2dsZVZpc2liaWxpdHkoZmFsc2UpO1xyXG4gICAgICAgIHRoaXMub25IaWRkZW4uZW1pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuX2Rlc3Ryb3kkLm5leHQoKTtcclxuICAgICAgICB0aGlzLmNsZWFuKCk7XHJcbiAgICAgICAgaWYgKHRoaXMucG9wcGVyT3B0aW9ucy5hcHBlbmRUbyAmJiB0aGlzLmVsUmVmICYmIHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCAmJiB0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICB0aGlzLl92aWV3UmVmLmRldGFjaCgpO1xyXG4gICAgICAgICAgICB0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkRvY3VtZW50UmVzaXplKCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcihcIm1vdXNlb3ZlclwiKVxyXG4gICAgb25Nb3VzZU92ZXIoKSB7XHJcbiAgICAgICAgdGhpcy5pc01vdXNlT3ZlciA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvdygpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMucmVmZXJlbmNlT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGFwcGVuZFRvUGFyZW50ID0gdGhpcy5wb3BwZXJPcHRpb25zLmFwcGVuZFRvICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5wb3BwZXJPcHRpb25zLmFwcGVuZFRvKTtcclxuICAgICAgICBpZiAoYXBwZW5kVG9QYXJlbnQgJiYgdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGUgIT09IGFwcGVuZFRvUGFyZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlICYmIHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIGFwcGVuZFRvUGFyZW50LmFwcGVuZENoaWxkKHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwb3BwZXJPcHRpb25zOiBPcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzdHJhdGVneTogdGhpcy5wb3BwZXJPcHRpb25zLnBvc2l0aW9uRml4ZWQgPyBcImZpeGVkXCIgOiBcImFic29sdXRlXCIsXHJcbiAgICAgICAgICAgIHBsYWNlbWVudDogdGhpcy5wb3BwZXJPcHRpb25zLnBsYWNlbWVudCxcclxuICAgICAgICAgICAgbW9kaWZpZXJzOiB0aGlzLl9iYXNlTW9kaWZpZXJzXHJcbiAgICAgICAgfSBhcyBPcHRpb25zO1xyXG4gICAgICAgIGlmICh0aGlzLm9uVXBkYXRlKSB7XHJcbiAgICAgICAgICAgIHBvcHBlck9wdGlvbnMub25GaXJzdFVwZGF0ZSA9IHRoaXMub25VcGRhdGUgYXMgYW55O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYm91bmRhcmllc0VsZW1lbnQgPSB0aGlzLnBvcHBlck9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnBvcHBlck9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQpO1xyXG5cclxuICAgICAgICBpZiAocG9wcGVyT3B0aW9ucy5tb2RpZmllcnMgJiYgYm91bmRhcmllc0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcInByZXZlbnRPdmVyZmxvd1wiLFxyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdGhpcy5wb3BwZXJPcHRpb25zLnByZXZlbnRPdmVyZmxvdyxcclxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeTogYm91bmRhcmllc0VsZW1lbnRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBhcyBQcmV2ZW50T3ZlcmZsb3dNb2RpZmllcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwb3BwZXJPcHRpb25zLm1vZGlmaWVycykge1xyXG4gICAgICAgICAgICBjb25zdCBwcmV2ZW50T3ZlcmZsb3dNb2RpZmllciA9IHBvcHBlck9wdGlvbnMubW9kaWZpZXJzLmZpbmQoKHYpID0+IHYubmFtZSA9PT0gXCJwcmV2ZW50T3ZlcmZsb3dcIik7XHJcbiAgICAgICAgICAgIGlmIChwcmV2ZW50T3ZlcmZsb3dNb2RpZmllciAmJiAhcHJldmVudE92ZXJmbG93TW9kaWZpZXIuZW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGlkZU1vZGlmaWVyID0gcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMuZmluZCgodikgPT4gdi5uYW1lID09PSBcInByZXZlbnRPdmVyZmxvd1wiKTtcclxuICAgICAgICAgICAgICAgIGhpZGVNb2RpZmllciAmJiAoaGlkZU1vZGlmaWVyLmVuYWJsZWQgPSAhMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZGV0ZXJtaW5lQXJyb3dDb2xvcigpO1xyXG4gICAgICAgIHBvcHBlck9wdGlvbnMubW9kaWZpZXJzID0gcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMuY29uY2F0KHRoaXMucG9wcGVyT3B0aW9ucy5wb3BwZXJNb2RpZmllcnMpO1xyXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9wcGVySW5zdGFuY2UgPSBQb3BwZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZlcmVuY2VPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BwZXJWaWV3UmVmLm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9wcGVyT3B0aW9ucyxcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlVmlzaWJpbGl0eSghMCk7XHJcbiAgICAgICAgZnJvbUV2ZW50KGRvY3VtZW50LCBcInJlc2l6ZVwiKVxyXG4gICAgICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5fZGVzdHJveSQpKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKHtcclxuICAgICAgICAgICAgICAgIG5leHQ6ICgpID0+IHRoaXMub25Eb2N1bWVudFJlc2l6ZSgpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIpXHJcbiAgICBzaG93T25MZWF2ZSgpIHtcclxuICAgICAgICB0aGlzLmlzTW91c2VPdmVyID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMucG9wcGVyT3B0aW9ucy50cmlnZ2VyICE9PSBOZ3hQb3BwZXJqc1RyaWdnZXJzLmhvdmVyICYmICF0aGlzLnBvcHBlck9wdGlvbnMuaGlkZU9uTW91c2VMZWF2ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRvZ2dsZSB2aXNpYmlsaXR5IGFuZCBkZXRlY3QgY2hhbmdlcyAtIFJ1biBvbmx5IGFmdGVyIG5nT25Jbml0IVxyXG4gICAgdG9nZ2xlVmlzaWJpbGl0eShzdGF0ZTogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZVZpc2liaWxpdHkoc3RhdGUpO1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxyXG4gICAgICAgIGlmICghdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWZbXCJkZXN0cm95ZWRcIl0pIHtcclxuICAgICAgICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5wb3BwZXJJbnN0YW5jZSAmJiAodGhpcy5wb3BwZXJJbnN0YW5jZSBhcyBhbnkpLnVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfY3JlYXRlQXJyb3dTZWxlY3RvcigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBgZGl2IyR7dGhpcy5pZH0ubmd4cF9fY29udGFpbmVyID4gLm5neHBfX2Fycm93Lm5neHBfX2ZvcmNlLWFycm93YDtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX2RldGVybWluZUFycm93Q29sb3IoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBvcHBlck9wdGlvbnMuc3R5bGVzIHx8IHRoaXMuYXJyb3dDb2xvcikge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICExO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBydWxlVmFsdWUgPSB0aGlzLnBvcHBlck9wdGlvbnMuc3R5bGVzW1wiYmFja2dyb3VuZC1jb2xvclwiXSB8fCB0aGlzLnBvcHBlck9wdGlvbnMuc3R5bGVzLmJhY2tncm91bmRDb2xvcjtcclxuICAgICAgICBpZiAodGhpcy5hcnJvd0NvbG9yID09PSBydWxlVmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuICExO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFycm93Q29sb3IgPSBydWxlVmFsdWU7XHJcbiAgICAgICAgbGV0ICRzdHlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3RoaXMuX3N0eWxlSWR9YCkgYXMgSFRNTFN0eWxlRWxlbWVudDtcclxuICAgICAgICBjb25zdCBzdHlsZUNvbnRlbnQgPSB0aGlzLmFycm93Q29sb3IgP1xyXG4gICAgICAgICAgICBgJHt0aGlzLl9jcmVhdGVBcnJvd1NlbGVjdG9yKCl9OmJlZm9yZSB7IGJhY2tncm91bmQtY29sb3I6ICR7dGhpcy5hcnJvd0NvbG9yfTsgfWAgOiBcIlwiO1xyXG4gICAgICAgIGlmICghJHN0eWxlKSB7XHJcbiAgICAgICAgICAgICRzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSBhcyBIVE1MU3R5bGVFbGVtZW50O1xyXG4gICAgICAgICAgICAkc3R5bGUuaWQgPSB0aGlzLl9zdHlsZUlkO1xyXG4gICAgICAgICAgICAkc3R5bGUuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHQvY3NzXCIpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCRzdHlsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxyXG4gICAgICAgIGlmICgkc3R5bGVbXCJzdHlsZVNoZWV0XCJdKSB7XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxyXG4gICAgICAgICAgICAkc3R5bGVbXCJzdHlsZVNoZWV0XCJdLmNzc1RleHQgPSBzdHlsZUNvbnRlbnQ7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgcmVxdWlyZWQgZm9yIElFOCBhbmQgYmVsb3cuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAkc3R5bGUuaW5uZXJIVE1MID0gc3R5bGVDb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3RvZ2dsZVZpc2liaWxpdHkoc3RhdGUpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRpc3BsYXlUeXBlID0gW1wibm9uZVwiLCBcImJsb2NrXCJdWytzdGF0ZV07XHJcbiAgICAgICAgdGhpcy5vcGFjaXR5ID0gK3N0YXRlO1xyXG4gICAgICAgIHRoaXMuYXJpYUhpZGRlbiA9IGAkeyFzdGF0ZX1gO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgIH1cclxufVxyXG4iLCI8ZGl2ICNwb3BwZXJWaWV3UmVmXHJcbiAgICAgW2F0dHIuaWRdPVwiaWRcIlxyXG4gICAgIFtjbGFzcy5uZ3hwX19jb250YWluZXJdPVwiIXBvcHBlck9wdGlvbnMuZGlzYWJsZURlZmF1bHRTdHlsaW5nXCJcclxuICAgICBbY2xhc3Mubmd4cF9fYW5pbWF0aW9uXT1cIiFwb3BwZXJPcHRpb25zLmRpc2FibGVBbmltYXRpb25cIlxyXG4gICAgIFtzdHlsZS5kaXNwbGF5XT1cImRpc3BsYXlUeXBlXCJcclxuICAgICBbc3R5bGUub3BhY2l0eV09XCJvcGFjaXR5XCJcclxuICAgICBbbmdTdHlsZV09XCJwb3BwZXJPcHRpb25zLnN0eWxlc1wiXHJcbiAgICAgW25nQ2xhc3NdPVwiZXh0cmFjdEFwcGxpZWRDbGFzc0xpc3RFeHByKHBvcHBlck9wdGlvbnMuYXBwbHlDbGFzcylcIlxyXG4gICAgIGF0dHIuYXJpYS1oaWRkZW49XCJ7e2FyaWFIaWRkZW59fVwiXHJcbiAgICAgW2F0dHIuYXJpYS1kZXNjcmliZWRieV09XCJwb3BwZXJPcHRpb25zLmFyaWFEZXNjcmliZSB8fCBudWxsXCJcclxuICAgICBhdHRyLnJvbGU9XCJ7e3BvcHBlck9wdGlvbnMuYXJpYVJvbGV9fVwiPlxyXG4gICAgPGRpdiAqbmdJZj1cInRleHRcIlxyXG4gICAgICAgICBjbGFzcz1cIm5neHBfX2lubmVyXCJcclxuICAgICAgICAgW2lubmVySFRNTF09XCJ0ZXh0XCI+XHJcbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2ICpuZ0lmPVwiIXRleHRcIlxyXG4gICAgICAgICBjbGFzcz1cIm5neHBfX2lubmVyXCI+XHJcbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwibmd4cF9fYXJyb3dcIlxyXG4gICAgICAgICBkYXRhLXBvcHBlci1hcnJvd1xyXG4gICAgICAgICBbY2xhc3Mubmd4cF9fZm9yY2UtYXJyb3ddPVwiYXJyb3dDb2xvclwiXHJcbiAgICAgICAgIFtuZ0NsYXNzXT1cImV4dHJhY3RBcHBsaWVkQ2xhc3NMaXN0RXhwcihwb3BwZXJPcHRpb25zLmFwcGx5QXJyb3dDbGFzcylcIj48L2Rpdj5cclxuXHJcbjwvZGl2PlxyXG4iXX0=