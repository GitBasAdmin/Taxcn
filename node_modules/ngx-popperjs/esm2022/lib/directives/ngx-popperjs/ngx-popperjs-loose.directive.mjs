// tslint:disable:no-input-rename
import { Directive, Inject, Input } from "@angular/core";
import { NGX_POPPERJS_DEFAULTS } from "../../models/ngx-popperjs-defaults.model";
import { NgxPopperjsDirective } from "./ngx-popperjs.directive";
import * as i0 from "@angular/core";
class NgxPopperjsLooseDirective extends NgxPopperjsDirective {
    set popperLoose(newValue) {
        this.content = newValue;
    }
    set popperLoosePlacement(newValue) {
        this.placement = newValue;
    }
    set popperLooseTrigger(newValue) {
        this.showTrigger = newValue;
    }
    constructor(changeDetectorRef, elementRef, vcr, popperDefaults = {}) {
        super(changeDetectorRef, elementRef, vcr, popperDefaults);
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: NgxPopperjsLooseDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: NGX_POPPERJS_DEFAULTS }], target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.2", type: NgxPopperjsLooseDirective, selector: "[popperLoose]", inputs: { popperLoose: "popperLoose", popperLoosePlacement: "popperLoosePlacement", popperLooseTrigger: "popperLooseTrigger" }, exportAs: ["popperLoose"], usesInheritance: true, ngImport: i0 });
}
export { NgxPopperjsLooseDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: NgxPopperjsLooseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[popperLoose]",
                    exportAs: "popperLoose"
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_POPPERJS_DEFAULTS]
                }] }]; }, propDecorators: { popperLoose: [{
                type: Input
            }], popperLoosePlacement: [{
                type: Input
            }], popperLooseTrigger: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBvcHBlcmpzLWxvb3NlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1wb3BwZXJqcy9zcmMvbGliL2RpcmVjdGl2ZXMvbmd4LXBvcHBlcmpzL25neC1wb3BwZXJqcy1sb29zZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUNBQWlDO0FBQ2pDLE9BQU8sRUFFSCxTQUFTLEVBRVQsTUFBTSxFQUNOLEtBQUssRUFFUixNQUFNLGVBQWUsQ0FBQztBQUl2QixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSwwQ0FBMEMsQ0FBQztBQUMvRSxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQzs7QUFJOUQsTUFJYSx5QkFBMEIsU0FBUSxvQkFBb0I7SUFFL0QsSUFDSSxXQUFXLENBQUMsUUFBOEM7UUFDMUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQ0ksb0JBQW9CLENBQUMsUUFBb0M7UUFDekQsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFpQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxJQUNJLGtCQUFrQixDQUFDLFFBQWtDO1FBQ3JELElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBK0IsQ0FBQztJQUN2RCxDQUFDO0lBRUQsWUFBWSxpQkFBb0MsRUFDcEMsVUFBc0IsRUFDdEIsR0FBcUIsRUFDVSxpQkFBcUMsRUFBRTtRQUM5RSxLQUFLLENBQUMsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUM5RCxDQUFDOzBIQXRCUSx5QkFBeUIsNkdBb0JkLHFCQUFxQjs4R0FwQmhDLHlCQUF5Qjs7U0FBekIseUJBQXlCOzJGQUF6Qix5QkFBeUI7a0JBSnJDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFFBQVEsRUFBRSxhQUFhO2lCQUMxQjs7MEJBcUJnQixNQUFNOzJCQUFDLHFCQUFxQjs0Q0FqQnJDLFdBQVc7c0JBRGQsS0FBSztnQkFNRixvQkFBb0I7c0JBRHZCLEtBQUs7Z0JBTUYsa0JBQWtCO3NCQURyQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6bm8taW5wdXQtcmVuYW1lXHJcbmltcG9ydCB7XHJcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgIERpcmVjdGl2ZSxcclxuICAgIEVsZW1lbnRSZWYsXHJcbiAgICBJbmplY3QsXHJcbiAgICBJbnB1dCxcclxuICAgIFZpZXdDb250YWluZXJSZWZcclxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG4vL1xyXG5pbXBvcnQge05neFBvcHBlcmpzT3B0aW9uc30gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtcG9wcGVyanMtb3B0aW9ucy5tb2RlbFwiO1xyXG5pbXBvcnQge05neFBvcHBlcmpzUGxhY2VtZW50c30gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtcG9wcGVyanMtcGxhY2VtZW50cy5tb2RlbFwiO1xyXG5pbXBvcnQge05HWF9QT1BQRVJKU19ERUZBVUxUU30gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtcG9wcGVyanMtZGVmYXVsdHMubW9kZWxcIjtcclxuaW1wb3J0IHtOZ3hQb3BwZXJqc0RpcmVjdGl2ZX0gZnJvbSBcIi4vbmd4LXBvcHBlcmpzLmRpcmVjdGl2ZVwiO1xyXG5pbXBvcnQge05neFBvcHBlcmpzQ29udGVudENvbXBvbmVudH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvbmd4LXBvcHBlcmpzLWNvbnRlbnQvbmd4LXBvcHBlcmpzLWNvbnRlbnQuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7Tmd4UG9wcGVyanNUcmlnZ2Vyc30gZnJvbSBcIi4uLy4uL21vZGVscy9uZ3gtcG9wcGVyanMtdHJpZ2dlcnMubW9kZWxcIjtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6IFwiW3BvcHBlckxvb3NlXVwiLFxyXG4gICAgZXhwb3J0QXM6IFwicG9wcGVyTG9vc2VcIlxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4UG9wcGVyanNMb29zZURpcmVjdGl2ZSBleHRlbmRzIE5neFBvcHBlcmpzRGlyZWN0aXZlIHtcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IHBvcHBlckxvb3NlKG5ld1ZhbHVlOiBzdHJpbmcgfCBOZ3hQb3BwZXJqc0NvbnRlbnRDb21wb25lbnQpIHtcclxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBuZXdWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IHBvcHBlckxvb3NlUGxhY2VtZW50KG5ld1ZhbHVlOiBgJHtOZ3hQb3BwZXJqc1BsYWNlbWVudHN9YCkge1xyXG4gICAgICAgIHRoaXMucGxhY2VtZW50ID0gbmV3VmFsdWUgYXMgTmd4UG9wcGVyanNQbGFjZW1lbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgcG9wcGVyTG9vc2VUcmlnZ2VyKG5ld1ZhbHVlOiBgJHtOZ3hQb3BwZXJqc1RyaWdnZXJzfWApIHtcclxuICAgICAgICB0aGlzLnNob3dUcmlnZ2VyID0gbmV3VmFsdWUgYXMgTmd4UG9wcGVyanNUcmlnZ2VycztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxyXG4gICAgICAgICAgICAgICAgdmNyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgICAgICAgICAgQEluamVjdChOR1hfUE9QUEVSSlNfREVGQVVMVFMpIHBvcHBlckRlZmF1bHRzOiBOZ3hQb3BwZXJqc09wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKGNoYW5nZURldGVjdG9yUmVmLCBlbGVtZW50UmVmLCB2Y3IsIHBvcHBlckRlZmF1bHRzKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19