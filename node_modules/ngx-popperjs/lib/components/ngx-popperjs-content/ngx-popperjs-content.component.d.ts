import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, ViewContainerRef } from "@angular/core";
import { NgxPopperjsOptions } from "../../models/ngx-popperjs-options.model";
import { ArrowModifier } from "@popperjs/core/lib/modifiers/arrow";
import { Instance } from "@popperjs/core/lib/types";
import { OffsetModifier } from "@popperjs/core/lib/modifiers/offset";
import { Subject } from "rxjs";
import * as i0 from "@angular/core";
export declare class NgxPopperjsContentComponent implements OnDestroy {
    elRef: ElementRef;
    protected _viewRef: ViewContainerRef;
    protected _changeDetectorRef: ChangeDetectorRef;
    static nextId: number;
    ariaHidden: string;
    arrowColor: string | null;
    displayType: string;
    id: string;
    isMouseOver: boolean;
    onHidden: EventEmitter<any>;
    onUpdate: () => any;
    opacity: number;
    popperInstance: Instance;
    popperOptions: NgxPopperjsOptions;
    popperViewRef: ElementRef;
    referenceObject: HTMLElement;
    state: boolean;
    text: string;
    protected readonly _baseModifiers: [OffsetModifier, ArrowModifier];
    protected _destroy$: Subject<void>;
    protected _styleId: string;
    constructor(elRef: ElementRef, _viewRef: ViewContainerRef, _changeDetectorRef: ChangeDetectorRef);
    clean(): void;
    extractAppliedClassListExpr(classList?: string | string[]): object;
    hide(): void;
    ngOnDestroy(): void;
    onDocumentResize(): void;
    onMouseOver(): void;
    show(): void;
    showOnLeave(): void;
    toggleVisibility(state: boolean): void;
    update(): void;
    protected _createArrowSelector(): string;
    protected _determineArrowColor(): boolean;
    protected _toggleVisibility(state: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxPopperjsContentComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxPopperjsContentComponent, "popper-content", ["ngxPopperjsContent"], {}, {}, never, ["*", "*"], false, never>;
}
