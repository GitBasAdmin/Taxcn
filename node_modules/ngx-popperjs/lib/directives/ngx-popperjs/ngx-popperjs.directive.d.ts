import { ChangeDetectorRef, ComponentRef, ElementRef, EventEmitter, OnDestroy, OnInit, ViewContainerRef } from "@angular/core";
import { NgxPopperjsContentComponent } from "../../components/ngx-popperjs-content/ngx-popperjs-content.component";
import { NgxPopperjsOptions } from "../../models/ngx-popperjs-options.model";
import { NgxPopperjsPlacements } from "../../models/ngx-popperjs-placements.model";
import { NgxPopperjsTriggers } from "../../models/ngx-popperjs-triggers.model";
import { Modifier } from "@popperjs/core";
import { Subject } from "rxjs";
import * as i0 from "@angular/core";
export declare class NgxPopperjsDirective implements OnInit, OnDestroy {
    protected _changeDetectorRef: ChangeDetectorRef;
    protected _elementRef: ElementRef;
    protected _vcr: ViewContainerRef;
    protected _popperDefaults: NgxPopperjsOptions;
    static baseOptions: NgxPopperjsOptions;
    set applyClass(newValue: string);
    get applyClass(): string;
    ariaDescribe: string | void;
    ariaRole: string | void;
    boundariesElement: string;
    closeOnClickOutside: boolean;
    set content(newValue: string | NgxPopperjsContentComponent);
    get content(): string | NgxPopperjsContentComponent;
    disableAnimation: boolean;
    set disabled(newValue: boolean);
    get disabled(): boolean;
    disableStyle: boolean;
    hideOnClickOutside: boolean | void;
    hideOnMouseLeave: boolean | void;
    hideOnScroll: boolean | void;
    hideTimeout: number;
    set placement(newValue: NgxPopperjsPlacements);
    get placement(): NgxPopperjsPlacements;
    popperAppendTo: string;
    set popperApplyArrowClass(newValue: string);
    get popperApplyArrowClass(): string;
    popperModifiers: Partial<Modifier<any, any>>[];
    popperOnHidden: EventEmitter<NgxPopperjsDirective>;
    popperOnShown: EventEmitter<NgxPopperjsDirective>;
    popperOnUpdate: EventEmitter<any>;
    positionFixed: boolean;
    set preventOverflow(newValue: boolean);
    get preventOverflow(): boolean;
    showDelay: number | undefined;
    showOnStart: boolean;
    showTrigger: NgxPopperjsTriggers | undefined;
    styles: object;
    targetElement: HTMLElement;
    timeoutAfterShow: number;
    protected _applyClass: string;
    protected _content: string | NgxPopperjsContentComponent;
    protected _destroy$: Subject<void>;
    protected _disabled: boolean;
    protected _globalEventListenersCtrl$: Subject<void>;
    protected _popperApplyArrowClass: string;
    protected _popperContent: NgxPopperjsContentComponent;
    protected _popperContentClass: typeof NgxPopperjsContentComponent;
    protected _popperContentRef: ComponentRef<NgxPopperjsContentComponent>;
    protected _popperPlacement: NgxPopperjsPlacements;
    protected _popperPreventOverflow: boolean;
    protected _scheduledHideTimeoutCtrl$: Subject<void>;
    protected _scheduledShowTimeoutCtrl$: Subject<void>;
    protected _shown: boolean;
    constructor(_changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef, _vcr: ViewContainerRef, _popperDefaults?: NgxPopperjsOptions);
    static assignDefined(target: any, ...sources: any[]): any;
    applyTriggerListeners(): void;
    getRefElement(): any;
    hide(): void;
    hideOnClickOutsideHandler($event: MouseEvent): void;
    hideOnScrollHandler($event: MouseEvent): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    scheduledHide($event?: any, delay?: number): void;
    scheduledShow(delay?: number): void;
    show(): void;
    toggle(): void;
    protected _addListener(eventName: string, cb: () => void): void;
    protected _applyChanges(): void;
    protected _checkExisting(key: string, newValue: string | number | boolean | NgxPopperjsPlacements): void;
    protected _constructContent(): NgxPopperjsContentComponent;
    protected _getScrollParent(node: any): any;
    protected _onPopperUpdate(event: any): void;
    protected _setContentProperties(popperRef: NgxPopperjsContentComponent): void;
    protected _setDefaults(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxPopperjsDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgxPopperjsDirective, "[popper]", ["popper"], { "applyClass": { "alias": "popperApplyClass"; "required": false; }; "ariaDescribe": { "alias": "popperAriaDescribeBy"; "required": false; }; "ariaRole": { "alias": "popperAriaRole"; "required": false; }; "boundariesElement": { "alias": "popperBoundaries"; "required": false; }; "closeOnClickOutside": { "alias": "popperCloseOnClickOutside"; "required": false; }; "content": { "alias": "popper"; "required": false; }; "disableAnimation": { "alias": "popperDisableAnimation"; "required": false; }; "disabled": { "alias": "popperDisabled"; "required": false; }; "disableStyle": { "alias": "popperDisableStyle"; "required": false; }; "hideOnClickOutside": { "alias": "popperHideOnClickOutside"; "required": false; }; "hideOnMouseLeave": { "alias": "popperHideOnMouseLeave"; "required": false; }; "hideOnScroll": { "alias": "popperHideOnScroll"; "required": false; }; "hideTimeout": { "alias": "popperTimeout"; "required": false; }; "placement": { "alias": "popperPlacement"; "required": false; }; "popperAppendTo": { "alias": "popperAppendTo"; "required": false; }; "popperApplyArrowClass": { "alias": "popperApplyArrowClass"; "required": false; }; "popperModifiers": { "alias": "popperModifiers"; "required": false; }; "positionFixed": { "alias": "popperPositionFixed"; "required": false; }; "preventOverflow": { "alias": "popperPreventOverflow"; "required": false; }; "showDelay": { "alias": "popperDelay"; "required": false; }; "showOnStart": { "alias": "popperShowOnStart"; "required": false; }; "showTrigger": { "alias": "popperTrigger"; "required": false; }; "styles": { "alias": "popperStyles"; "required": false; }; "targetElement": { "alias": "popperTarget"; "required": false; }; "timeoutAfterShow": { "alias": "popperTimeoutAfterShow"; "required": false; }; }, { "popperOnHidden": "popperOnHidden"; "popperOnShown": "popperOnShown"; "popperOnUpdate": "popperOnUpdate"; }, never, never, false, never>;
}
